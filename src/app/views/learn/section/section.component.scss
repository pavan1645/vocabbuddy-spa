@import "../../../../assets/variables.scss";

.main { 
	background: radial-gradient(rgba($color: map-get($map: $my-colors, $key: "green"), $alpha: 0.8), map-get($map: $my-colors, $key: "green"));
	position: relative;
	overflow: hidden;
}

.holder { 
	height: 100vh;
	width: 100vw;
}

nav {
	position: fixed;
	top: 0%;
	width: 100%;
}

.icon {
	width: 1rem;
	fill: white;
}

.card {
	width: 75vw;
	height: 75vw;
	border-radius: 5px;
	position: absolute;
	z-index: 0;
	display: none;
	overflow: hidden;
	transition: all 0.3s;
	
	&.show {
		.def { margin-top: auto; margin-bottom: auto }
		.word { font-size: 16px; }
	}
	
	&.fullscreen {
		width: 100%;
		height: 100%;
		border-radius: 0px;
	}

	&:first-of-type { transition-duration: 0.1s }
	
	.pending {
		position: absolute;
		left: 8px;
		top: 8px;
	}
	
	.expand-icon {
		position: absolute;
		right: 0.25rem;
		top: 0.25rem;
		height: 1rem;
		width: 1rem;
		padding: 0.75rem;

		.icon {
			fill: #4caf50;
			width: 1rem;
			display: block;		
		}
	}
	
	.back {
		
		.expand-icon {
			top: 0.5rem;
			right: 0.5rem;
			border: 1px solid map-get($map: $my-colors, $key: "red");
			border-radius: 50%;
			color: map-get($map: $my-colors, $key: "red");
			transform: rotate(45deg);
		}

		.icon-wrapper {
			position: relative;
			transform: none;
		}

		.overflow-auto { overflow-y: auto; max-height: calc(100vh - 60px); }

		section {
			transform: translateX(100vw);
			animation: slideInRight 0.3s ease-out forwards;
		}

		@for $i from 1 to 7 {
			section:nth-of-type(#{$i}) { animation-delay: calc(#{$i} * 0.1s + 0.2s) }
		}
		
		ul {
			margin: 0;
			overflow-y: auto;
			text-align: left;

			li {
				padding: 0.75rem 1rem;
				position: relative;
			
				&:last-of-type {

					form {
						display: inline-block;
						width: calc(100% - 25px);

						input {
							padding: 0;
							border: 0;
							font-size: 16px;

							&:focus {
								outline: none;
							}
						}
					}
				}

				.delete {
					position: absolute;
					right: 1rem;
					background-color: map-get($map: $my-colors, $key: "red");
					width: 1rem;
					height: 1rem;
					padding: 0;
					font-size: 16px;
					border-radius: 50%;
					color: white;
					font-weight: bold;
					top: calc(50% - 0.5rem);
					transform: rotate(45deg);
				}
			}
		}
	}

	.word { font-family: $font-title; font-size: 25px; }

	.def button, .word {
		transform: translateY(calc(37.5vw - 100% - 1.5rem));	// card width: 75/2 = 37.5, padding: 1.5rem
	}
	
	.actions {
		display: flex;

		button {
			display: inline-block;
			width: 50%;
			position: relative;
			font-size: 12px;

			&:first-of-type::before, &:last-of-type::before {
				content: '\2715';
				position: absolute;
				left: 7px;
				top: calc(50% - 0.5rem);
			}

			&:last-of-type::before { content: '\2713' }
		}
	}
	

	.meaning, .example, .actions, .pronunciation { 
		transition: all 0.5s 0.3s;
		pointer-events: none;
		opacity: 0;
	}
	
	.icon-wrapper {
		height: 30px;
		width: 30px;
		border: 1px solid map-get($map: $colors, $key: "gray");
		border-radius: 50%;
		position: absolute;
		left: 0;
		transform: translateX(calc(-100% - 0.5rem));		

		.icon {
			fill: map-get($map: $colors, $key: "secondary");
			align-items: unset;
		} 
	
		&.speak { border: 1px solid map-get($map: $my-colors, $key: "blue"); }
		&.speak .icon { fill: map-get($map: $my-colors, $key: "blue"); }
	}
	
	.def {
		button .icon {
			display: inline-block;
			width: 0.5rem;
			transform: rotate(180deg);
			fill: map-get($map: $my-colors, $key: "blue");
		}
	}
}

.no-transition .card { transition: none; }

.card.removed {
	transform: translateX(80%) translateY(-100%) rotate(60deg) !important; 
	opacity: 0; 
	transition: all 0.75s;

	&[data-answer="-1"] {
		transform: translateX(-80%) translateY(-100%) rotate(-60deg)  !important; 
	}
}


.card[data-index="0"], .card[data-index="1"], .card[data-index="2"] { display: flex; }

.card[data-index="0"] {
	z-index: 3;

	&.show {
		.word { transform: translateY(0); transition: all 0.3s; }
		.def button { display: none; }
		.meaning, .example, .actions, .pronunciation  {
			pointer-events: all;
			opacity: 1;
		}
	}
}
.card[data-index="1"] {
	transform: scale(0.9) translateY(12%);
	z-index: 2;
}
.card[data-index="2"] {
	transform: scale(0.8) translateY(27%);
	z-index: 1;
}

.progress-box {
	position: absolute;
    bottom: 0;
    padding: 1rem;
	width: 100%;

	.row {
		align-items: center;
		margin-bottom: 0.75rem;

		.desc {
			text-shadow: 0px 1px 3px black;
		}

		.progress-line {
			border: 1px solid white;
			border-radius: 5px;
			box-shadow: 0px 5px 5px rgba(map-get($map: $colors, $key: "gray"), $alpha: 0.3);
			background-color: white;
			position: relative;
			overflow: hidden;
			height: 20px;

			.line, span {
				top: 0;
				left: 0;
				height: 100%;
				position: absolute;
				transition: width 0.3s;
			}

			span { width: 100%; }
			
		}

		&:nth-of-type(1) .line { background-color: rgba($color: map-get($map: $my-colors, $key: "green"), $alpha: 0.8); }
		&:nth-of-type(2) .line { background-color: rgba($color: map-get($map: $my-colors, $key: "yellow"), $alpha: 0.8); }
		&:nth-of-type(3) .line { background-color: rgba($color: map-get($map: $my-colors, $key: "red"), $alpha: 0.8); }
	}
	
}

@keyframes slideInRight {
	to { transform: translateX(0); }
}